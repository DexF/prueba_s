#install.packages(c("shiny","shinythemes","dplyr","readr","ggplot2","forcats"))

library(shiny)
library(shinythemes)
library(dplyr)
library(readr)
library(ggplot2)
library(forcats)
library(scales)
library(RColorBrewer)

#Notacion cientifica
options(scipen=999)

setwd("~/R/App-4")
key <- kpi_gen
key$kpi <- sample(100, size = nrow(key), replace = TRUE)

npv <- npv_y2

ans <- resp

# Definir UI
ui <- fluidPage( 
  
  #Links and css resources
  includeCSS("app1.css"),
  tags$head(
    tags$link(rel = "stylesheet", href = "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css")
  ),
  
  br(),
  
  tags$div(class="container-fluid", 
           br(), 
           img(src='logo.png', align = "left"),
           tags$div(class="cuadro", h1("Management Console"))
  ),
  
    # Panel para inputs ----
    column(2,
      
      radioButtons("eleg", "Filtro de elegibilidad:",
                   c("Elegible" = "TRUE",
                     "No Elegible" = "FALSE")),
    
      
      selectInput("riesgo", "Filtro de riesgo:",
                  c('AAA' = 'AAA',
                    'AA' = 'AA',
                    'A' = 'AA',
                    'BBB' = 'BBB',
                    'BB' = 'BB',
                    'B' = 'B'))
    ),
      
    column(2,
      checkboxGroupInput("prod", "Filtro de producto:",
                         c('TC' = 'TC','CP' = 'CP','CN' = 'CN','CLI' ='CLI',
                           'DB' = 'DB','EFE' = 'EFE','AAC' = 'AAC'))
    ),
    
    # Panel para outputs ----
    mainPanel(
      
      plotOutput("Kpi"),
      br(),
      plotOutput("NPV"),
      br(),
      plotOutput("Clientes")
      
    )
)

# Definir servidor ----
server <- function(input, output, session) {
  
  # Tabla de Kpi ----
  output$Kpi <- renderPlot({
    
    filtro <- as.data.frame(key[key$eleg == input$eleg,])
    filtro <- as.data.frame(filtro[filtro$seg_riesgo == input$riesgo,])
    filtro <- filtro %>% filter(prod %in% input$prod)
    
    ggplot(filtro, aes(x=t, y=kpi, color=prod)) +
      geom_line()+
      scale_y_continuous("Kpi", labels = comma) +   
      scale_x_continuous(name="Mes")
    
  })
  
  # Tabla de NPV ----
  output$NPV <- renderPlot({
    
    #filtro <- as.data.frame(npv[npv$seg_riesgo == input$riesgo,])
    npv.m = melt(npv, id.var="seg_riesgo")
    
    ggplot(npv.m, aes(x = variable, y = value, color = seg_riesgo)) +
      geom_point() +
      labs(x="Producto", y="Npv") +
      scale_y_continuous(labels = comma)
  })
  
  # Tabla de Clientes ----
  output$Clientes <- renderPlot({
    
    #ans[is.na(ans)] <- 0
    ans[ans > 0] <- 1
    #filtro <- as.data.frame(ans[ans$seg_riesgo == input$riesgo,])
    ans.m = melt(ans, id.var="seg_riesgo")
    ans.s <- ddply(ans.m, .(seg_riesgo, variable), 
                 summarize, 
                 value = sum(value))
    
    ggplot(ans.s, aes(x = variable, y = value, color = seg_riesgo)) +
      geom_point() +
      labs(x="Producto", y="Ctes")
    
  })
}

shinyApp(ui = ui, server = server)
